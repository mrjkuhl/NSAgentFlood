#!/usr/bin/env python2
#
# Copyright 2014 Joel Cool-Panama <mr.jkuhl@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import ctypes
from sdl2 import *
import ConfigParser

def loadMapConf(confFile):

	filePointer = ConfigParser.RawConfigParser();
	filePointer.read(confFile);

	return filePointer;

def loadStage(renderer, stage):

	stage = loadMapConf(world + "level1/stages/" + stage + ".conf");
	movementZoneList = readZoneList(stage);

	image = SDL_LoadBMP(world + "resources/" + stage.get('stage', 'background'));
	background = SDL_CreateTextureFromSurface(renderer, image);
	SDL_FreeSurface(image);

	return background, movementZoneList;

def readZoneList(stageConf):

	zoneList = [];
	counter = 1;

	while True:

		try:

			zone = stageConf.get('stage', "movementZone" + str(counter));
			zoneList.append(zone);
			counter += 1;

		except:

			break;

	return zoneList;

def testZone(movementZoneList, x, y):

	finalx = x + 40;
	finaly = y + 40;

	for movementZone in movementZoneList:

		movementZone = movementZone.split(',');
		movementZone = [int(num) for num in movementZone];

		if x >= movementZone[0] and y >= movementZone[1] and finalx <= movementZone[2] and y >= movementZone[3] and finalx <= movementZone[4] and finaly <= movementZone[5] and x >= movementZone[6] and finaly <= movementZone[7]:

			print movementZone;
			return True;

	return False;

def setPlayerOrientation(renderer, orientation):

	if orientation == "left":

		image = SDL_LoadBMP(b"resources/playerLeft.bmp");

	else:

		image = SDL_LoadBMP(b"resources/playerRight.bmp");

	return SDL_CreateTextureFromSurface(renderer, image);


def renderFrame(renderer, background, sprite, spriteSource, destination):

	SDL_RenderCopy(renderer, background, None, None);
	SDL_RenderCopy(renderer, sprite, spriteSource, destination);

	SDL_RenderPresent(renderer);

def run():

	SDL_Init(SDL_INIT_VIDEO);

	spriteSource = SDL_Rect(0, 0, spriteSize, spriteSize);
	destination = SDL_Rect(int(windowWidth / 2 - spriteSize / 2), int(windowHeight / 2 - spriteSize / 2), spriteSize, spriteSize);

	window = SDL_CreateWindow(b"NSAgent Flood", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 800, 600, SDL_WINDOW_SHOWN);
	renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);

	windowsurface = SDL_GetWindowSurface(window);

	background, movementZoneList = loadStage(renderer, "stage1");

	player = setPlayerOrientation(renderer, "left");

	gameRun = True;
	event = SDL_Event();

	while gameRun:

		renderFrame(renderer, background, player, spriteSource, destination);

		SDL_WaitEvent(ctypes.byref(event))

		if event.type == SDL_QUIT:

			gameRun = False;

			break;

		elif event.type == SDL_KEYDOWN:

			keyPressed = event.key.keysym.sym;
			if keyPressed == moveUpKey and testZone(movementZoneList, destination.x, destination.y - int(spriteSize / 2)):

				destination.y -= int(spriteSize / 2);

			elif keyPressed == moveDownKey and testZone(movementZoneList, destination.x, destination.y + int(spriteSize / 2)):

				destination.y += int(spriteSize / 2);

			elif keyPressed == moveLeftKey: 

				player = setPlayerOrientation(renderer, "left");

				if testZone(movementZoneList, destination.x - int(spriteSize / 2), destination.y):

					destination.x -= int(spriteSize / 2);

			elif keyPressed == moveRightKey:

				player = setPlayerOrientation(renderer, "right");

				if testZone(movementZoneList, destination.x + int(spriteSize / 2), destination.y):

					destination.x += int(spriteSize / 2);

			elif keyPressed == SDLK_ESCAPE:

				gameRun = 0;

				break;

	SDL_DestroyWindow(window);
	SDL_Quit();

	return 0;

if __name__ == "__main__":

	spriteSize = 40;
	windowWidth = 800;
	windowHeight = 600;

	moveUpKey = SDLK_e;
	moveDownKey = SDLK_d;
	moveLeftKey = SDLK_s;
	moveRightKey = SDLK_f;

	world = "/home/joelc/workspace/nsagentflood/worlds/nsagentflood/"

	sys.exit(run());
